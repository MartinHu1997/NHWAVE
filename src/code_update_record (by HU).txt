--------------------------------------------------------------------------------------

                               NHWAVE update records
                                                                      by Martin HU
--------------------------------------------------------------------------------------

UPDATE_00001
by HU
2021/04/15

■ Additions: added a new variable OUT_Te (Logical Var.) indicating the outputting process of Temperature Field Data
· add the variable declaration of OUT_Te in mod_global.F
· add the instructions of reading the value of OUT_Te from input.txt (initialize.F)
· add instructions in nhwave.F : if OUT_Te = T, CALL putfile3D() 
· add instructions in input.txt for "output" : OUT_Te = T (or OUT_Te = F)
//

UPDATE_00002
by HU
2021/04/20
■ Corrected the typos in nhwave.F 
· in the process of calculating dt_viscous (subroutine estimate_dt)
-- replace '1.e-16' with by 'Small'  (Small=1.e-16 as a global variable)

■ Additions: Inputting INITIAL Temperature Field Data is allowed
· add the variable declaration of INITIAL_TEMP (Logical Var.) in mod_global.F
· additions in SUBROUTINE initial (in initialize.F)
-- add the variable declaration of TempG (Real Var.)
-- add a code section, similar to the SALINITY codes/modules, for reading initial temperature field from an input file (temp0.txt)
· add instructions in input.txt for "output" : INITIAL_TEMP = T (or INITIAL_TEMP = F)
//

UPDATE_00003
by HU
2021/04/26
■ Addition the input option of User-Defined VERTICAL GRIDS in initialize.F (user defind vertical grid)
· if IVGRD = 10, the nhwave can read a data file called verticalgrid.txt , which contains an array of real numbers. And these numbers specify the 'Thickness Percentage' of every vertical layers;
(NOTE: there is the sigma-coordinate in nhwave, thus the sum of numbers in verticalgrid.txt must be equal to 100.0).
· add a new elseif-branch for IVGRD=10 (subroutine generate_grid)
· This feature is still in testing !!!
//

UPDATE_00004
by HU
2021/04/27
■ Addition of the input option of LIMITER_TYPE in initialize.F
· add the variable declaration of LIMITER_TYPE (String Var.) in mod_global.F
· add the instructions for reading the value of LIMITER_TYPE from input.txt (initialize.F)
 -- LIMITER_TYPE = 'MINMOD' or 'VANLEER' or 'SUPERBEE'
· rewrite the FUNCTION LIMITER(A,B)  (in nhwave.F)
■ Changes (in initialize.F)
· change the code sequence that matched every <if ierr==1> to the corresponding <GET_STRING_VAL(......)>
 -- including 'CALL GET_STRING_VAL(HIGH_ORDER,FILE_NAME,'HIGH_ORDER',line,ierr)'
 -- including 'CALL GET_STRING_VAL(TIME_ORDER,FILE_NAME,'TIME_ORDER',line,ierr)'
· correct the logical sequences of these codes
//

UPDATE_00005
by HU
2021/05/15
■ Adding a new simulating case, named 'Lock-Exchange_2D', in filefold 'new examples cases by HU'

UPDATE_00006
by HU
2021/05/17
■ Addition of a new MODULE named 'PASSIVE TRACERS' for simulating the motion of conservative tracer(s)
· define a new FLAG for compilation: TRACERS
· add a piece of codes, tracer.F
-- including two subroutine: eval_tracer and tracer_bc
· add the variables declaration of variables in mod_global.F
 -- Trac,DTrac,DTrac0 (real, 3-D arrray)
 -- Trin_X0,Trin_Xn (real, 2-D arrray)
 -- INITIAL_TRAC, OUT_Tr (Logical Var.)
· add instructions in initialize.F
 -- reading the value of INITIAL_TRAC from input.txt
 -- reading the value of OUT_Tr from input.txt
 -- allocating the space for new variables (Trac,DTrac,DTrac0,Trin_X0,Trin_Xn)
 -- the variable declaration of TempG (Real Var.) in subroutine initial
 -- giving initial values (Zero) to Trac, DTrac, DTrac0, Trin_X0 and Trin_Xn
 -- a code section in initial.F, similar to the SALINITY modules, for reading initial tracers concentration field from an input file (trac0.txt)
· add the instructions in nhwave.F
 -- calling eval_tracer in main program
 -- instructions for outputing in subroutine preview : if OUT_Te = T, CALL putfile3D() 
 -- 'DTrac0 = DTrac' in subroutine update_vars
 -- 'Trin_X0(j,k) = 0.0' and 'Trin_Xn(j,k) = 0.0' in subroutine flux_left_right_boundary
 -- a new parameter option (IVAR=7) for subroutine adv_scalar_hlpa
 -- 'Scal_X0 = Trin_X0' and 'Scal_Xn = Trin_Xn' in subroutine flux_scalar_bc 
· add a new option in Makefile
 -- a new flag (FLAG_15 = -DTRACERS)
 -- a new source code file (tracer.F) in MAIN
■ find a bug in subroutine initial from initial.F
· when initializing the temperature field, variables DTemp and DTEMP0 are supposed to be equal to D*Temp(0), instead of a constant 10.0.
  BUT, it doesn't matter now.

UPDATE_00007
by HU
2021/05/19
■ Update PASSIVE TRACERS module, that can simulate multi-component tracers field
· new variables declarations in mod_global.F
 -- change Trac,DTrac,DTrac0 from 3D-Array to 4D-Array
 -- change Trin_X0,Trin_Xn from 2D-Array to 3D-Array
 -- added the N_TRACERS (Integer Var.)
· add the codes/instructions for initialization (initialize.F)
 -- added the instructions of reading the value of N_TRACERS (Integer Var.) from input.txt
 -- update the codes of allocating the space of Trac,DTrac,DTrac0,Trin_X0,Trin_Xn
 -- change TracG from 3D-Array to 4D-Array (subroutine initial)
 -- added a new string variable, n_str, in subroutine initial
 -- update the codes/instructions for reading tracers field from .txt files (subroutine initial)
· added 'call preview' at the before the time-stepping cycle (nhwave.F)
· add the codes/instructions for output (subroutine preview, nhwave.F)
 -- added a new string variable, n_str
 -- update the codes/instructions for outputting tracers fields
· update the codes/instructions for determining the fluxes boundary condition of tracers (subroutine flux_left_right_boundary)
· add the codes/instructions for simulation of tracers (tracer.F)
 -- a new subroutine eval_tracer(ISTEP) and a new subroutine tracer_bc(N_C), that are fit for simulation of multi-component tracers field
 -- a new subroutine adv_tracer_hlpa(Flx,Fly,Flz,Phi,R5,N_C) 
 -- a new subroutine flux_tracer_bc(N_C,Scalx,Scaly,Scalz)

UPDATE_00008
by HU
2021/06/16
■ Addition of the input option of EQU_STATE in initialize.F
· add the variable declaration of EQU_STATE (String Var.) in mod_global.F
· add the instructions for reading the value of EQU_STATE from input.txt (initialize.F)
 -- EQU_STATE = 'KUNDSON-EkMAN' or 'UNESCO' or 'USER-DEFINED'
· rewrite the eval_dens (in nhwave.F)

UPDATE_00009
by HU
2021/08/26
■ Addition of the parameters of EQU_STATE (subroutine eval_dens, nhwave.F)
· add EQU_STATE = 'SAL' for the case where the density is only depended on salinity
  (density = reference density * (1.0 + beta * salinity))
■ Addition of some new slope limiter options (LIMITER_TYPE) for reconstruction of variables (function LIMITER, nhwave.F)
· LIMITER_TYPE = 'MONO': Monotonized central-difference Limiter;
· LIMITER_TYPE = 'NMIN': Another Minmod Limiter [ limiter(A, B) = B * max(0, min(p*A/B, 1.0), min(A/B, p)) and p∈[1,2] ];
· LIMITER_TYPE = 'VANA': van Albada Limiter;
· LIMITER_TYPE = 'MSUP': Minmod-Superbee Limiter;
■ Addition a if-else-end instructions for the simulations in 2-D vertical domain (subroutine diffusion, nhwave.F)
· at the end of subroutine diffusion, we added: if (Nglob == 1) then to make y-related diffusion terms equal to Zero( Diffxy = Diffyx = Diffyy = Diffyz = Diffzy = 0 ).
